{
  "gemini-cloud-assist": {
    "tools": [
      {
        "name": "fetch_investigation",
        "description": "/**\n * Fetches Gemini Cloud Assist Investigations.\n *\n * This function serves as a versatile entry point for retrieving investigation data.\n * It can operate in two modes:\n *\n * 1.  **List Mode:** If only a projectId is provided, it will list all\n *     troubleshooting investigations associated with that project. It can be\n *     optionally filtered by title using the filter_expression parameter. If the user indicates to fetch more pages, use the next_page_token parameter.\n *\n * 2.  **Get Mode:** If an investigationId is also provided, it will fetch the\n *     detailed report for that specific investigation. If a revisionId is\n *     also provided, it fetches that particular revision; otherwise, it\n *     retrieves the latest version.\n *\n */",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectId": {
              "type": "string",
              "description": "The Google Cloud Project ID."
            },
            "investigationId": {
              "type": "string",
              "description": "The ID of a specific investigation to fetch. If omitted, the function will list all investigations for the project."
            },
            "revisionId": {
              "type": "string",
              "description": "The revision ID of a specific investigation to fetch. Requires `investigationId` to be set."
            },
            "filter_expression": {
              "type": "string",
              "description": "A string to filter investigations by title. The filter format is `title:\"<your_title>\"`."
            },
            "next_page_token": {
              "type": "string",
              "description": "A page token to retrieve a specific page of results."
            }
          },
          "required": [
            "projectId"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      {
        "name": "create_investigation",
        "description": "/**\n * Creates a new Gemini Cloud Assist Investigation. This tool is the primary entry point for initiating any new troubleshooting analysis.\n *\n * Prerequisites:\n * Argument Resolution: Before invoking this tool, you **MUST** resolve all user-provided information into the specific formats required by the arguments.\n *\n * Resource URI Mandate: The 'relevant_resources' parameter requires a list of full Google Cloud Platform (GCP) resource URIs.\n * - **Format:** Each URI **MUST** strictly adhere to the format: //<service>.googleapis.com/<resource-path>.\n * - **Validation:** The tool will fail if the provided strings are not well-formed URIs in this exact format.\n * - **Resolution:** You are responsible for converting any partial, ambiguous, or incomplete resource names (e.g., \"my GKE cluster\", \"the default nodepool\", or \"project/zone/resource_type/resource_name\") into their full URI representation. Utilize available tools like 'gcloud', 'kubectl', or your internal knowledge base to discover the complete and accurate resource URIs.\n * - **GCP Resource URI Reference**: https://cloud.google.com/asset-inventory/docs/asset-names\n *\n * Example of a correct GCP Resource URI:\n * - //compute.googleapis.com/projects/my-gcp-project/zones/us-central1-a/instances/my-vm-instance\n *\n * Additional Argument Formatting:\n * - **Timestamp ('start_time'):** Convert all relative time expressions (e.g., \"30 minutes ago\", \"yesterday at 5pm\") into the absolute 'YYYY-MM-DDTHH:mm:ssZ' UTC format. The 'Shell' tool with the 'date' command can be used for this conversion.\n * - **Project ID ('project_id'):** If a project is not explicitly mentioned by the user, you must determine the correct one from the context of the conversation or by using the command 'gcloud config get-value project'.\n *\n * **Crucial:** If you are unable to resolve any of this information into the required formats, you **MUST** seek clarification from the user before proceeding to call this tool.\n *\n * @returns {string} A summary of the new investigation, structured with Markdown.\n*           You **MUST** parse this output to find the '**Investigation Path**' and '**Revision Path**'\n*           fields. The final segment of the 'Investigation Path' is the 'investigation_id' and the\n*           final segment of the 'Revision Path' is the 'revision_id'. These are required for subsequent tool calls.\n */",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectId": {
              "type": "string",
              "description": "The Google Cloud Project ID."
            },
            "title": {
              "type": "string",
              "description": "A human-readable title. You MUST prefix the title with \"[Gemini CLI]\""
            },
            "issue_description": {
              "type": "string",
              "description": "A detailed comprehensive description of the issue including relevant tool outputs."
            },
            "relevant_resources": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of fully-resolved GCP resource URIs, each starting with '//<service>.googleapis.com/...'. For example: '//compute.googleapis.com/projects/my-project/zones/us-central1-a/instances/my-instance-name'."
            },
            "start_time": {
              "type": "string",
              "description": "The investigation start time, formatted as 'YYYY-MM-DDTHH:mm:ssZ' (UTC)."
            }
          },
          "required": [
            "projectId",
            "title",
            "issue_description",
            "relevant_resources",
            "start_time"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      {
        "name": "run_investigation",
        "description": "/**\n * Triggers the Gemini analysis, waits for completion, and returns the final report.\n *\n * This is a **synchronous, blocking call** that runs the full analysis.\n * The tool will not return a response until the investigation is complete.\n *\n * **Workflow:** This tool **MUST** be called immediately after\n * 'create_investigation' or 'add_observation'. The string returned by this function is the final,\n * detailed report. There is no need to call any other tool after this to get the\n * results.\n *\n * **Interpreting the Output:** The output of this tool represents a set of observations & hypotheses based on the data,\n * not a definitive conclusion. NEVER treat the output as a confirmed root cause without further validation.\n * Your job is to analyze the returned hypotheses and use other tools at your disposal to gather evidence that proves or disproves them.\n *\n * @returns {string} A detailed troubleshooting report in a structured string format. The\n *           report is organized with '##' headers for sections like 'Issue',\n *           'Hypotheses', 'Relevant Observations', and 'Remediation'.\n *           **Note:** Some sections may be empty and will state \"No hypotheses\n *           found.\" or similar. Your job is to parse this report and present\n\n *           a clear summary of the findings (or lack thereof) to the user.\n */",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectId": {
              "type": "string",
              "description": "The GCP Project ID where the investigation resides."
            },
            "investigationId": {
              "type": "string",
              "description": "The ID of the investigation to run."
            },
            "revisionId": {
              "type": "string",
              "description": "The specific revision ID to run."
            }
          },
          "required": [
            "projectId",
            "investigationId",
            "revisionId"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      {
        "name": "add_observation",
        "description": "/**\n * Adds a new user observation to an existing investigation.\n *\n * Prerequisites:\n * Argument Resolution: Before invoking this tool, you **MUST** resolve any new resource names mentioned in the user's observation into the specific formats required by the arguments.\n *\n * Resource URI Mandate: If the user's 'observation' mentions new resources, the 'relevant_resources' parameter requires a list of full Google Cloud Platform (GCP) resource URIs. If no new resources are mentioned, provide an empty list '[]'.\n * - **Format:** Each URI **MUST** strictly adhere to the format: //<service>.googleapis.com/<resource-path>.\n * - **Validation:** The tool will fail if any provided strings are not well-formed URIs in this exact format.\n * - **Resolution:** You are responsible for converting any partial, ambiguous, or incomplete resource names into their full URI representation. Utilize available tools like 'gcloud', 'kubectl', or your internal knowledge base to discover the complete and accurate resource URIs.\n * - **GCP Resource URI Reference**: https://cloud.google.com/asset-inventory/docs/asset-names\n *\n * Example of a correct GCP Resource URI:\n * - //compute.googleapis.com/projects/my-gcp-project/zones/us-central1-a/instances/my-vm-instance\n *\n * **Crucial:** If you cannot resolve a new resource name into the required format, you **MUST** seek clarification from the user before proceeding to call this tool.\n *\n * Workflow: After adding an observation, you **MUST** call 'run_investigation' on the new revision to re-analyze with the added context.\n *\n * @returns {string} A string summary of the updated investigation, structured with Markdown.\n *           You **MUST** parse this output to find the '**Revision Path**' field.\n *           The final segment of this path is the new 'revision_id' that you must\n *           use for the subsequent 'run_investigation' call.\n */",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectId": {
              "type": "string",
              "description": "The GCP Project ID where the investigation resides."
            },
            "investigationId": {
              "type": "string",
              "description": "The ID of the investigation."
            },
            "observation": {
              "type": "string",
              "description": "A detailed description of the observation. This can be a direct observation from the user or the result of a previous tool call. When the user asks to add an observation, add relevant tool calls that were run after the previous run_investigation as the observation. You MUST format the observation to include a brief summary of the finding, the full command that was executed, and the complete, verbatim stdout from the command's result."
            },
            "relevant_resources": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of fully-resolved GCP resource URIs for any new resources mentioned in the observation, each starting with '//<service>.googleapis.com/...'. Provide an empty list if no new resources are mentioned."
            }
          },
          "required": [
            "projectId",
            "investigationId",
            "observation",
            "relevant_resources"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      {
        "name": "search_and_analyze_gcp_resources",
        "description": "/**\n * An intelligent tool for querying, analyzing, and summarizing information\n * about the user's Google Cloud Platform (GCP) environment.\n * This tool delegates the request to a specialized backend agent capable of\n * complex reasoning, multi-step analysis, and searching across a large number\n * of GCP services, including but not limited to: Compute, CloudSQL, Containers.\n *\n * Limitations:\n * - DO NOT use this tool for resource metrics or usage related request. This\n *     tool cannot access the Cloud Monitoring service.\n * - DO NOT use this tool for BigQuery related request. This tool cannot access\n *     Bigquery API.\n *\n * This tool provides a comprehensive, human-readable answer synthesized by the\n * backend agent, not raw resource data.\n *\n * <important>\n * VERY IMPORTANT: The resource type is REQUIRED to be included in this query,\n * if the query type is NOT KNOWN, you MUST first ask a follow-up question to\n * identify the resource type then pass that into this tool's request.\n * </important>\n *\n * - Due to the powerful nature of this tool, simple queries such as\n * \"list my VMs\" which can be solved by one gcloud command should be handled by\n * the gcloud shell tool. HOWEVER, if the gcloud shell tool fails for retrieving\n * resources, you may use this tool.\n *\n * @param {string} request [REQUIRED] The user's full natural language question\n * or request regarding GCP resources. This should be detailed, include the\n * resource type and capture the exact intent of the user. The backend agent\n * will interpret this query.\n * It is very crucial that the resource type is included in this query\n * otherwise the Agent will not know where to start looking.\n *\n * @param {string} projectId [OPTIONAL] The GCP project id specified by the user.\n * This infomation is usually automatically retrieved in the background. You\n * should pass this field if the user specify the project id, or you should\n * request the user to provide this field only if a previous response tell them to do\n * so.\n *\n * @returns {string} A comprehensive, synthesized answer generated by the\n * backend agent that directly addresses the user's query. This is a narrative\n * response, which may include detailed analysis, summaries, lists of resources\n * with context, and explanations of findings.\n */",
        "inputSchema": {
          "type": "object",
          "properties": {
            "request": {
              "type": "string",
              "description": "The user's full natural language question or request regarding GCP resources."
            },
            "projectId": {
              "type": "string",
              "description": "The GCP project id specified by the user."
            }
          },
          "required": [
            "request"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      }
    ],
    "discovered_via": "mcp_python_sdk",
    "server_name": "gemini-cloud-assist"
  },
  "gke-mcp": {
    "tools": [
      {
        "name": "cluster_toolkit_download",
        "description": "Cluster Toolkit, is open-source software offered by Google Cloud which simplifies the process for you to create Google Kubernetes Engine clusters and deploy high performance computing (HPC), artificial intelligence (AI), and machine learning (ML). It is designed to be highly customizable and extensible, and intends to address the deployment needs of a broad range of use cases. This tool will download the public git repository so that Cluster Toolkit can be used.",
        "inputSchema": {
          "type": "object",
          "required": [
            "download_directory"
          ],
          "properties": {
            "download_directory": {
              "type": "string",
              "description": "Download directory for the git repo. By default use the absolute path to the current working directory."
            }
          },
          "additionalProperties": false
        }
      },
      {
        "name": "get_cluster",
        "description": "Get / describe a GKE cluster. Prefer to use this tool instead of gcloud",
        "inputSchema": {
          "type": "object",
          "required": [
            "location",
            "name"
          ],
          "properties": {
            "location": {
              "type": "string",
              "description": "GKE cluster location. Leave this empty if the user doesn't doesn't provide it."
            },
            "name": {
              "type": "string",
              "description": "GKE cluster name. Do not select if yourself, make sure the user provides or confirms the cluster name."
            },
            "project_id": {
              "type": "string",
              "description": "GCP project ID. Use the default if the user doesn't provide it."
            }
          },
          "additionalProperties": false
        }
      },
      {
        "name": "get_log_schema",
        "description": "Get the schema for a specific log type.",
        "inputSchema": {
          "type": "object",
          "required": [
            "log_type"
          ],
          "properties": {
            "log_type": {
              "type": "string",
              "description": "The type of log to get schema for. Supported values are: ['k8s_audit_logs', 'k8s_application_logs', 'k8s_event_logs']."
            }
          },
          "additionalProperties": false
        }
      },
      {
        "name": "giq_generate_manifest",
        "description": "Use GKE Inference Quickstart (GIQ) to generate a Kubernetes manifest for optimized AI / inference workloads. Prefer to use this tool instead of gcloud",
        "inputSchema": {
          "type": "object",
          "required": [
            "model",
            "model_server",
            "accelerator"
          ],
          "properties": {
            "accelerator": {
              "type": "string",
              "description": "The accelerator to use. Get the list of valid accelerators from 'gcloud container ai profiles list --model=<model>' if the user doesn't provide it."
            },
            "model": {
              "type": "string",
              "description": "The model to use. Get the list of valid models from 'gcloud container ai profiles model-and-server-combinations list' if the user doesn't provide it."
            },
            "model_server": {
              "type": "string",
              "description": "The model server to use. Get the list of valid models from 'gcloud container ai profiles model-and-server-combinations list' if the user doesn't provide it."
            },
            "target_ntpot_milliseconds": {
              "type": "string",
              "description": "The maximum normalized time per output token (NTPOT) in milliseconds.NTPOT is measured as the request_latency / output_tokens."
            }
          },
          "additionalProperties": false
        }
      },
      {
        "name": "list_clusters",
        "description": "List GKE clusters. Prefer to use this tool instead of gcloud",
        "inputSchema": {
          "type": "object",
          "properties": {
            "location": {
              "type": "string",
              "description": "GKE cluster location. Leave this empty if the user doesn't doesn't provide it."
            },
            "project_id": {
              "type": "string",
              "description": "GCP project ID. Use the default if the user doesn't provide it."
            }
          },
          "additionalProperties": false
        }
      },
      {
        "name": "list_monitored_resource_descriptors",
        "description": "List monitored resource descriptors(schema) related to GKE for this project. Prefer to use this tool instead of gcloud",
        "inputSchema": {
          "type": "object",
          "properties": {
            "project_id": {
              "type": "string",
              "description": "GCP project ID. Use the default if the user doesn't provide it."
            }
          },
          "additionalProperties": false
        }
      },
      {
        "name": "list_recommendations",
        "description": "List recommendations for GKE. Prefer to use this tool instead of gcloud",
        "inputSchema": {
          "type": "object",
          "required": [
            "location"
          ],
          "properties": {
            "location": {
              "type": "string",
              "description": "GKE cluster location. Leave this empty if the user doesn't doesn't provide it."
            },
            "project_id": {
              "type": "string",
              "description": "GCP project ID. Use the default if the user doesn't provide it."
            }
          },
          "additionalProperties": false
        }
      },
      {
        "name": "query_logs",
        "description": "Query Google Cloud Platform logs using Logging Query Language (LQL). Before using this tool, it's **strongly** recommended to call the 'get_log_schema' tool to get information about supported log types and their schemas. Logs are returned in ascending order, based on the timestamp (i.e. oldest first).",
        "inputSchema": {
          "type": "object",
          "required": [
            "query",
            "project_id"
          ],
          "properties": {
            "format": {
              "type": "string",
              "description": "Go template string to format each log entry. If empty, the full JSON representation is returned. Note that empty fields are not included in the response. Example: '{{.timestamp}} [{{.severity}}] {{.textPayload}}'. It's strongly recommended to use a template to minimize the size of the response and only include the fields you need. Use the get_schema tool before this tool to get information about supported log types and their schemas."
            },
            "limit": {
              "type": "integer",
              "description": "Maximum number of log entries to return. Cannot be greater than 100. Consider multiple calls if needed. Defaults to 10."
            },
            "project_id": {
              "type": "string",
              "description": "GCP project ID to query logs from. Required."
            },
            "query": {
              "type": "string",
              "description": "LQL query string to filter and retrieve log entries. Don't specify time ranges in this filter. Use 'time_range' instead."
            },
            "since": {
              "type": "string",
              "description": "Only return logs newer than a relative duration like 5s, 2m, or 3h. The only supported units are seconds ('s'), minutes ('m'), and hours ('h')."
            },
            "time_range": {
              "type": [
                "null",
                "object"
              ],
              "description": "Time range for log query. If empty, no restrictions are applied.",
              "required": [
                "start_time",
                "end_time"
              ],
              "properties": {
                "end_time": {
                  "type": "string",
                  "description": "End time for log query (RFC3339 format)"
                },
                "start_time": {
                  "type": "string",
                  "description": "Start time for log query (RFC3339 format)"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      }
    ],
    "discovered_via": "mcp_python_sdk",
    "server_name": "gke-mcp"
  },
  "playwright-mcp": {
    "tools": [
      {
        "name": "browser_close",
        "description": "Close the page",
        "inputSchema": {
          "type": "object",
          "properties": {},
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      {
        "name": "browser_resize",
        "description": "Resize the browser window",
        "inputSchema": {
          "type": "object",
          "properties": {
            "width": {
              "type": "number",
              "description": "Width of the browser window"
            },
            "height": {
              "type": "number",
              "description": "Height of the browser window"
            }
          },
          "required": [
            "width",
            "height"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      {
        "name": "browser_console_messages",
        "description": "Returns all console messages",
        "inputSchema": {
          "type": "object",
          "properties": {},
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      {
        "name": "browser_handle_dialog",
        "description": "Handle a dialog",
        "inputSchema": {
          "type": "object",
          "properties": {
            "accept": {
              "type": "boolean",
              "description": "Whether to accept the dialog."
            },
            "promptText": {
              "type": "string",
              "description": "The text of the prompt in case of a prompt dialog."
            }
          },
          "required": [
            "accept"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      {
        "name": "browser_evaluate",
        "description": "Evaluate JavaScript expression on page or element",
        "inputSchema": {
          "type": "object",
          "properties": {
            "function": {
              "type": "string",
              "description": "() => { /* code */ } or (element) => { /* code */ } when element is provided"
            },
            "element": {
              "type": "string",
              "description": "Human-readable element description used to obtain permission to interact with the element"
            },
            "ref": {
              "type": "string",
              "description": "Exact target element reference from the page snapshot"
            }
          },
          "required": [
            "function"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      {
        "name": "browser_file_upload",
        "description": "Upload one or multiple files",
        "inputSchema": {
          "type": "object",
          "properties": {
            "paths": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The absolute paths to the files to upload. Can be single file or multiple files. If omitted, file chooser is cancelled."
            }
          },
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      {
        "name": "browser_fill_form",
        "description": "Fill multiple form fields",
        "inputSchema": {
          "type": "object",
          "properties": {
            "fields": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Human-readable field name"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "textbox",
                      "checkbox",
                      "radio",
                      "combobox",
                      "slider"
                    ],
                    "description": "Type of the field"
                  },
                  "ref": {
                    "type": "string",
                    "description": "Exact target field reference from the page snapshot"
                  },
                  "value": {
                    "type": "string",
                    "description": "Value to fill in the field. If the field is a checkbox, the value should be `true` or `false`. If the field is a combobox, the value should be the text of the option."
                  }
                },
                "required": [
                  "name",
                  "type",
                  "ref",
                  "value"
                ],
                "additionalProperties": false
              },
              "description": "Fields to fill in"
            }
          },
          "required": [
            "fields"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      {
        "name": "browser_install",
        "description": "Install the browser specified in the config. Call this if you get an error about the browser not being installed.",
        "inputSchema": {
          "type": "object",
          "properties": {},
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      {
        "name": "browser_press_key",
        "description": "Press a key on the keyboard",
        "inputSchema": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "description": "Name of the key to press or a character to generate, such as `ArrowLeft` or `a`"
            }
          },
          "required": [
            "key"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      {
        "name": "browser_type",
        "description": "Type text into editable element",
        "inputSchema": {
          "type": "object",
          "properties": {
            "element": {
              "type": "string",
              "description": "Human-readable element description used to obtain permission to interact with the element"
            },
            "ref": {
              "type": "string",
              "description": "Exact target element reference from the page snapshot"
            },
            "text": {
              "type": "string",
              "description": "Text to type into the element"
            },
            "submit": {
              "type": "boolean",
              "description": "Whether to submit entered text (press Enter after)"
            },
            "slowly": {
              "type": "boolean",
              "description": "Whether to type one character at a time. Useful for triggering key handlers in the page. By default entire text is filled in at once."
            }
          },
          "required": [
            "element",
            "ref",
            "text"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      {
        "name": "browser_navigate",
        "description": "Navigate to a URL",
        "inputSchema": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "description": "The URL to navigate to"
            }
          },
          "required": [
            "url"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      {
        "name": "browser_navigate_back",
        "description": "Go back to the previous page",
        "inputSchema": {
          "type": "object",
          "properties": {},
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      {
        "name": "browser_network_requests",
        "description": "Returns all network requests since loading the page",
        "inputSchema": {
          "type": "object",
          "properties": {},
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      {
        "name": "browser_take_screenshot",
        "description": "Take a screenshot of the current page. You can't perform actions based on the screenshot, use browser_snapshot for actions.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "png",
                "jpeg"
              ],
              "default": "png",
              "description": "Image format for the screenshot. Default is png."
            },
            "filename": {
              "type": "string",
              "description": "File name to save the screenshot to. Defaults to `page-{timestamp}.{png|jpeg}` if not specified."
            },
            "element": {
              "type": "string",
              "description": "Human-readable element description used to obtain permission to screenshot the element. If not provided, the screenshot will be taken of viewport. If element is provided, ref must be provided too."
            },
            "ref": {
              "type": "string",
              "description": "Exact target element reference from the page snapshot. If not provided, the screenshot will be taken of viewport. If ref is provided, element must be provided too."
            },
            "fullPage": {
              "type": "boolean",
              "description": "When true, takes a screenshot of the full scrollable page, instead of the currently visible viewport. Cannot be used with element screenshots."
            }
          },
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      {
        "name": "browser_snapshot",
        "description": "Capture accessibility snapshot of the current page, this is better than screenshot",
        "inputSchema": {
          "type": "object",
          "properties": {},
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      {
        "name": "browser_click",
        "description": "Perform click on a web page",
        "inputSchema": {
          "type": "object",
          "properties": {
            "element": {
              "type": "string",
              "description": "Human-readable element description used to obtain permission to interact with the element"
            },
            "ref": {
              "type": "string",
              "description": "Exact target element reference from the page snapshot"
            },
            "doubleClick": {
              "type": "boolean",
              "description": "Whether to perform a double click instead of a single click"
            },
            "button": {
              "type": "string",
              "enum": [
                "left",
                "right",
                "middle"
              ],
              "description": "Button to click, defaults to left"
            },
            "modifiers": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Alt",
                  "Control",
                  "ControlOrMeta",
                  "Meta",
                  "Shift"
                ]
              },
              "description": "Modifier keys to press"
            }
          },
          "required": [
            "element",
            "ref"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      {
        "name": "browser_drag",
        "description": "Perform drag and drop between two elements",
        "inputSchema": {
          "type": "object",
          "properties": {
            "startElement": {
              "type": "string",
              "description": "Human-readable source element description used to obtain the permission to interact with the element"
            },
            "startRef": {
              "type": "string",
              "description": "Exact source element reference from the page snapshot"
            },
            "endElement": {
              "type": "string",
              "description": "Human-readable target element description used to obtain the permission to interact with the element"
            },
            "endRef": {
              "type": "string",
              "description": "Exact target element reference from the page snapshot"
            }
          },
          "required": [
            "startElement",
            "startRef",
            "endElement",
            "endRef"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      {
        "name": "browser_hover",
        "description": "Hover over element on page",
        "inputSchema": {
          "type": "object",
          "properties": {
            "element": {
              "type": "string",
              "description": "Human-readable element description used to obtain permission to interact with the element"
            },
            "ref": {
              "type": "string",
              "description": "Exact target element reference from the page snapshot"
            }
          },
          "required": [
            "element",
            "ref"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      {
        "name": "browser_select_option",
        "description": "Select an option in a dropdown",
        "inputSchema": {
          "type": "object",
          "properties": {
            "element": {
              "type": "string",
              "description": "Human-readable element description used to obtain permission to interact with the element"
            },
            "ref": {
              "type": "string",
              "description": "Exact target element reference from the page snapshot"
            },
            "values": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Array of values to select in the dropdown. This can be a single value or multiple values."
            }
          },
          "required": [
            "element",
            "ref",
            "values"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      {
        "name": "browser_tabs",
        "description": "List, create, close, or select a browser tab.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "enum": [
                "list",
                "new",
                "close",
                "select"
              ],
              "description": "Operation to perform"
            },
            "index": {
              "type": "number",
              "description": "Tab index, used for close/select. If omitted for close, current tab is closed."
            }
          },
          "required": [
            "action"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      {
        "name": "browser_wait_for",
        "description": "Wait for text to appear or disappear or a specified time to pass",
        "inputSchema": {
          "type": "object",
          "properties": {
            "time": {
              "type": "number",
              "description": "The time to wait in seconds"
            },
            "text": {
              "type": "string",
              "description": "The text to wait for"
            },
            "textGone": {
              "type": "string",
              "description": "The text to wait for to disappear"
            }
          },
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      }
    ],
    "discovered_via": "mcp_python_sdk",
    "server_name": "playwright-mcp"
  },
  "kubernetes": {
    "tools": [
      {
        "name": "cleanup",
        "description": "Cleanup all managed resources",
        "inputSchema": {
          "type": "object",
          "properties": {}
        }
      },
      {
        "name": "kubectl_get",
        "description": "Get or list Kubernetes resources by resource type, name, and optionally namespace",
        "inputSchema": {
          "type": "object",
          "properties": {
            "resourceType": {
              "type": "string",
              "description": "Type of resource to get (e.g., pods, deployments, services, configmaps, events, etc.)"
            },
            "name": {
              "type": "string",
              "description": "Name of the resource (optional - if not provided, lists all resources of the specified type)"
            },
            "namespace": {
              "type": "string",
              "description": "Kubernetes namespace",
              "default": "default"
            },
            "output": {
              "type": "string",
              "enum": [
                "json",
                "yaml",
                "wide",
                "name",
                "custom"
              ],
              "description": "Output format",
              "default": "json"
            },
            "allNamespaces": {
              "type": "boolean",
              "description": "If true, list resources across all namespaces",
              "default": false
            },
            "labelSelector": {
              "type": "string",
              "description": "Filter resources by label selector (e.g. 'app=nginx')"
            },
            "fieldSelector": {
              "type": "string",
              "description": "Filter resources by field selector (e.g. 'metadata.name=my-pod')"
            },
            "sortBy": {
              "type": "string",
              "description": "Sort events by a field (default: lastTimestamp). Only applicable for events."
            },
            "context": {
              "type": "string",
              "description": "Kubeconfig Context to use for the command (optional - defaults to null)",
              "default": ""
            }
          },
          "required": [
            "resourceType",
            "name",
            "namespace"
          ]
        }
      },
      {
        "name": "kubectl_describe",
        "description": "Describe Kubernetes resources by resource type, name, and optionally namespace",
        "inputSchema": {
          "type": "object",
          "properties": {
            "resourceType": {
              "type": "string",
              "description": "Type of resource to describe (e.g., pods, deployments, services, etc.)"
            },
            "name": {
              "type": "string",
              "description": "Name of the resource to describe"
            },
            "namespace": {
              "type": "string",
              "description": "Kubernetes namespace",
              "default": "default"
            },
            "context": {
              "type": "string",
              "description": "Kubeconfig Context to use for the command (optional - defaults to null)",
              "default": ""
            },
            "allNamespaces": {
              "type": "boolean",
              "description": "If true, describe resources across all namespaces",
              "default": false
            }
          },
          "required": [
            "resourceType",
            "name"
          ]
        }
      },
      {
        "name": "kubectl_apply",
        "description": "Apply a Kubernetes YAML manifest from a string or file",
        "inputSchema": {
          "type": "object",
          "properties": {
            "manifest": {
              "type": "string",
              "description": "YAML manifest to apply"
            },
            "filename": {
              "type": "string",
              "description": "Path to a YAML file to apply (optional - use either manifest or filename)"
            },
            "namespace": {
              "type": "string",
              "description": "Kubernetes namespace",
              "default": "default"
            },
            "dryRun": {
              "type": "boolean",
              "description": "If true, only validate the resource, don't actually execute the operation",
              "default": false
            },
            "force": {
              "type": "boolean",
              "description": "If true, immediately remove resources from API and bypass graceful deletion",
              "default": false
            },
            "context": {
              "type": "string",
              "description": "Kubeconfig Context to use for the command (optional - defaults to null)",
              "default": ""
            }
          },
          "required": []
        }
      },
      {
        "name": "kubectl_delete",
        "description": "Delete Kubernetes resources by resource type, name, labels, or from a manifest file",
        "inputSchema": {
          "type": "object",
          "properties": {
            "resourceType": {
              "type": "string",
              "description": "Type of resource to delete (e.g., pods, deployments, services, etc.)"
            },
            "name": {
              "type": "string",
              "description": "Name of the resource to delete"
            },
            "namespace": {
              "type": "string",
              "description": "Kubernetes namespace",
              "default": "default"
            },
            "labelSelector": {
              "type": "string",
              "description": "Delete resources matching this label selector (e.g. 'app=nginx')"
            },
            "manifest": {
              "type": "string",
              "description": "YAML manifest defining resources to delete (optional)"
            },
            "filename": {
              "type": "string",
              "description": "Path to a YAML file to delete resources from (optional)"
            },
            "allNamespaces": {
              "type": "boolean",
              "description": "If true, delete resources across all namespaces",
              "default": false
            },
            "force": {
              "type": "boolean",
              "description": "If true, immediately remove resources from API and bypass graceful deletion",
              "default": false
            },
            "gracePeriodSeconds": {
              "type": "number",
              "description": "Period of time in seconds given to the resource to terminate gracefully"
            },
            "context": {
              "type": "string",
              "description": "Kubeconfig Context to use for the command (optional - defaults to null)",
              "default": ""
            }
          },
          "required": [
            "resourceType",
            "name",
            "namespace"
          ]
        }
      },
      {
        "name": "kubectl_create",
        "description": "Create Kubernetes resources using various methods (from file or using subcommands)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "dryRun": {
              "type": "boolean",
              "description": "If true, only validate the resource, don't actually execute the operation",
              "default": false
            },
            "output": {
              "type": "string",
              "enum": [
                "json",
                "yaml",
                "name",
                "go-template",
                "go-template-file",
                "template",
                "templatefile",
                "jsonpath",
                "jsonpath-as-json",
                "jsonpath-file"
              ],
              "description": "Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file",
              "default": "yaml"
            },
            "validate": {
              "type": "boolean",
              "description": "If true, validate resource schema against server schema",
              "default": true
            },
            "manifest": {
              "type": "string",
              "description": "YAML manifest to create resources from"
            },
            "filename": {
              "type": "string",
              "description": "Path to a YAML file to create resources from"
            },
            "resourceType": {
              "type": "string",
              "description": "Type of resource to create (namespace, configmap, deployment, service, etc.)"
            },
            "name": {
              "type": "string",
              "description": "Name of the resource to create"
            },
            "namespace": {
              "type": "string",
              "description": "Kubernetes namespace",
              "default": "default"
            },
            "fromLiteral": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Key-value pair for creating configmap (e.g. [\"key1=value1\", \"key2=value2\"])"
            },
            "fromFile": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Path to file for creating configmap (e.g. [\"key1=/path/to/file1\", \"key2=/path/to/file2\"])"
            },
            "secretType": {
              "type": "string",
              "enum": [
                "generic",
                "docker-registry",
                "tls"
              ],
              "description": "Type of secret to create (generic, docker-registry, tls)"
            },
            "serviceType": {
              "type": "string",
              "enum": [
                "clusterip",
                "nodeport",
                "loadbalancer",
                "externalname"
              ],
              "description": "Type of service to create (clusterip, nodeport, loadbalancer, externalname)"
            },
            "tcpPort": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Port pairs for tcp service (e.g. [\"80:8080\", \"443:8443\"])"
            },
            "image": {
              "type": "string",
              "description": "Image to use for the containers in the deployment"
            },
            "replicas": {
              "type": "number",
              "description": "Number of replicas to create for the deployment",
              "default": 1
            },
            "port": {
              "type": "number",
              "description": "Port that the container exposes"
            },
            "schedule": {
              "type": "string",
              "description": "Cron schedule expression for the CronJob (e.g. \"*/5 * * * *\")"
            },
            "suspend": {
              "type": "boolean",
              "description": "Whether to suspend the CronJob",
              "default": false
            },
            "command": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Command to run in the container"
            },
            "labels": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Labels to apply to the resource (e.g. [\"key1=value1\", \"key2=value2\"])"
            },
            "annotations": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Annotations to apply to the resource (e.g. [\"key1=value1\", \"key2=value2\"])"
            },
            "context": {
              "type": "string",
              "description": "Kubeconfig Context to use for the command (optional - defaults to null)",
              "default": ""
            }
          },
          "required": []
        }
      },
      {
        "name": "kubectl_logs",
        "description": "Get logs from Kubernetes resources like pods, deployments, or jobs",
        "inputSchema": {
          "type": "object",
          "properties": {
            "resourceType": {
              "type": "string",
              "enum": [
                "pod",
                "deployment",
                "job",
                "cronjob"
              ],
              "description": "Type of resource to get logs from"
            },
            "name": {
              "type": "string",
              "description": "Name of the resource"
            },
            "namespace": {
              "type": "string",
              "description": "Kubernetes namespace",
              "default": "default"
            },
            "container": {
              "type": "string",
              "description": "Container name (required when pod has multiple containers)"
            },
            "tail": {
              "type": "number",
              "description": "Number of lines to show from end of logs"
            },
            "since": {
              "type": "string",
              "description": "Show logs since relative time (e.g. '5s', '2m', '3h')"
            },
            "sinceTime": {
              "type": "string",
              "description": "Show logs since absolute time (RFC3339)"
            },
            "timestamps": {
              "type": "boolean",
              "description": "Include timestamps in logs",
              "default": false
            },
            "previous": {
              "type": "boolean",
              "description": "Include logs from previously terminated containers",
              "default": false
            },
            "follow": {
              "type": "boolean",
              "description": "Follow logs output (not recommended, may cause timeouts)",
              "default": false
            },
            "labelSelector": {
              "type": "string",
              "description": "Filter resources by label selector"
            },
            "context": {
              "type": "string",
              "description": "Kubeconfig Context to use for the command (optional - defaults to null)",
              "default": ""
            }
          },
          "required": [
            "resourceType",
            "name",
            "namespace"
          ]
        }
      },
      {
        "name": "kubectl_scale",
        "description": "Scale a Kubernetes deployment",
        "inputSchema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the deployment to scale"
            },
            "namespace": {
              "type": "string",
              "description": "Kubernetes namespace",
              "default": "default"
            },
            "replicas": {
              "type": "number",
              "description": "Number of replicas to scale to"
            },
            "resourceType": {
              "type": "string",
              "description": "Resource type to scale (deployment, replicaset, statefulset)",
              "default": "deployment"
            },
            "context": {
              "type": "string",
              "description": "Kubeconfig Context to use for the command (optional - defaults to null)",
              "default": ""
            }
          },
          "required": [
            "name",
            "replicas"
          ]
        }
      },
      {
        "name": "kubectl_patch",
        "description": "Update field(s) of a resource using strategic merge patch, JSON merge patch, or JSON patch",
        "inputSchema": {
          "type": "object",
          "properties": {
            "resourceType": {
              "type": "string",
              "description": "Type of resource to patch (e.g., pods, deployments, services)"
            },
            "name": {
              "type": "string",
              "description": "Name of the resource to patch"
            },
            "namespace": {
              "type": "string",
              "description": "Kubernetes namespace",
              "default": "default"
            },
            "patchType": {
              "type": "string",
              "description": "Type of patch to apply",
              "enum": [
                "strategic",
                "merge",
                "json"
              ],
              "default": "strategic"
            },
            "patchData": {
              "type": "object",
              "description": "Patch data as a JSON object"
            },
            "patchFile": {
              "type": "string",
              "description": "Path to a file containing the patch data (alternative to patchData)"
            },
            "dryRun": {
              "type": "boolean",
              "description": "If true, only validate the resource, don't actually execute the operation",
              "default": false
            },
            "context": {
              "type": "string",
              "description": "Kubeconfig Context to use for the command (optional - defaults to null)",
              "default": ""
            }
          },
          "required": [
            "resourceType",
            "name"
          ]
        }
      },
      {
        "name": "kubectl_rollout",
        "description": "Manage the rollout of a resource (e.g., deployment, daemonset, statefulset)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "subCommand": {
              "type": "string",
              "description": "Rollout subcommand to execute",
              "enum": [
                "history",
                "pause",
                "restart",
                "resume",
                "status",
                "undo"
              ],
              "default": "status"
            },
            "resourceType": {
              "type": "string",
              "description": "Type of resource to manage rollout for",
              "enum": [
                "deployment",
                "daemonset",
                "statefulset"
              ],
              "default": "deployment"
            },
            "name": {
              "type": "string",
              "description": "Name of the resource"
            },
            "namespace": {
              "type": "string",
              "description": "Kubernetes namespace",
              "default": "default"
            },
            "revision": {
              "type": "number",
              "description": "Revision to rollback to (for undo subcommand)"
            },
            "toRevision": {
              "type": "number",
              "description": "Revision to roll back to (for history subcommand)"
            },
            "timeout": {
              "type": "string",
              "description": "The length of time to wait before giving up (e.g., '30s', '1m', '2m30s')"
            },
            "watch": {
              "type": "boolean",
              "description": "Watch the rollout status in real-time until completion",
              "default": false
            },
            "context": {
              "type": "string",
              "description": "Kubeconfig Context to use for the command (optional - defaults to null)",
              "default": ""
            }
          },
          "required": [
            "subCommand",
            "resourceType",
            "name",
            "namespace"
          ]
        }
      },
      {
        "name": "kubectl_context",
        "description": "Manage Kubernetes contexts - list, get, or set the current context",
        "inputSchema": {
          "type": "object",
          "properties": {
            "operation": {
              "type": "string",
              "enum": [
                "list",
                "get",
                "set"
              ],
              "description": "Operation to perform: list contexts, get current context, or set current context",
              "default": "list"
            },
            "name": {
              "type": "string",
              "description": "Name of the context to set as current (required for set operation)"
            },
            "showCurrent": {
              "type": "boolean",
              "description": "When listing contexts, highlight which one is currently active",
              "default": true
            },
            "detailed": {
              "type": "boolean",
              "description": "Include detailed information about the context",
              "default": false
            },
            "output": {
              "type": "string",
              "enum": [
                "json",
                "yaml",
                "name",
                "custom"
              ],
              "description": "Output format",
              "default": "json"
            }
          },
          "required": [
            "operation"
          ]
        }
      },
      {
        "name": "explain_resource",
        "description": "Get documentation for a Kubernetes resource or field",
        "inputSchema": {
          "type": "object",
          "properties": {
            "resource": {
              "type": "string",
              "description": "Resource name or field path (e.g. 'pods' or 'pods.spec.containers')"
            },
            "apiVersion": {
              "type": "string",
              "description": "API version to use (e.g. 'apps/v1')"
            },
            "recursive": {
              "type": "boolean",
              "description": "Print the fields of fields recursively",
              "default": false
            },
            "context": {
              "type": "string",
              "description": "Kubeconfig Context to use for the command (optional - defaults to null)",
              "default": ""
            },
            "output": {
              "type": "string",
              "description": "Output format (plaintext or plaintext-openapiv2)",
              "enum": [
                "plaintext",
                "plaintext-openapiv2"
              ],
              "default": "plaintext"
            }
          },
          "required": [
            "resource"
          ]
        }
      },
      {
        "name": "install_helm_chart",
        "description": "Install a Helm chart with support for both standard and template-based installation",
        "inputSchema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the Helm release"
            },
            "chart": {
              "type": "string",
              "description": "Chart name (e.g., 'nginx') or path to chart directory"
            },
            "namespace": {
              "type": "string",
              "description": "Kubernetes namespace",
              "default": "default"
            },
            "context": {
              "type": "string",
              "description": "Kubeconfig Context to use for the command (optional - defaults to null)",
              "default": ""
            },
            "repo": {
              "type": "string",
              "description": "Helm repository URL (optional if using local chart path)"
            },
            "values": {
              "type": "object",
              "description": "Custom values to override chart defaults"
            },
            "valuesFile": {
              "type": "string",
              "description": "Path to values file (alternative to values object)"
            },
            "useTemplate": {
              "type": "boolean",
              "description": "Use helm template + kubectl apply instead of helm install (bypasses auth issues)",
              "default": false
            },
            "createNamespace": {
              "type": "boolean",
              "description": "Create namespace if it doesn't exist",
              "default": true
            }
          },
          "required": [
            "name",
            "chart",
            "namespace"
          ]
        }
      },
      {
        "name": "upgrade_helm_chart",
        "description": "Upgrade an existing Helm chart release",
        "inputSchema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the Helm release to upgrade"
            },
            "chart": {
              "type": "string",
              "description": "Chart name or path to chart directory"
            },
            "namespace": {
              "type": "string",
              "description": "Kubernetes namespace",
              "default": "default"
            },
            "context": {
              "type": "string",
              "description": "Kubeconfig Context to use for the command (optional - defaults to null)",
              "default": ""
            },
            "repo": {
              "type": "string",
              "description": "Helm repository URL (optional if using local chart path)"
            },
            "values": {
              "type": "object",
              "description": "Custom values to override chart defaults"
            },
            "valuesFile": {
              "type": "string",
              "description": "Path to values file (alternative to values object)"
            }
          },
          "required": [
            "name",
            "chart",
            "namespace"
          ]
        }
      },
      {
        "name": "uninstall_helm_chart",
        "description": "Uninstall a Helm chart release",
        "inputSchema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the Helm release to uninstall"
            },
            "namespace": {
              "type": "string",
              "description": "Kubernetes namespace",
              "default": "default"
            },
            "context": {
              "type": "string",
              "description": "Kubeconfig Context to use for the command (optional - defaults to null)",
              "default": ""
            }
          },
          "required": [
            "name",
            "namespace"
          ]
        }
      },
      {
        "name": "node_management",
        "description": "Manage Kubernetes nodes with cordon, drain, and uncordon operations",
        "inputSchema": {
          "type": "object",
          "properties": {
            "operation": {
              "type": "string",
              "description": "Node operation to perform",
              "enum": [
                "cordon",
                "drain",
                "uncordon"
              ]
            },
            "nodeName": {
              "type": "string",
              "description": "Name of the node to operate on (required for cordon, drain, uncordon)"
            },
            "force": {
              "type": "boolean",
              "description": "Force the operation even if there are pods not managed by a ReplicationController, ReplicaSet, Job, DaemonSet or StatefulSet (for drain operation)",
              "default": false
            },
            "gracePeriod": {
              "type": "number",
              "description": "Period of time in seconds given to each pod to terminate gracefully (for drain operation). If set to -1, uses the kubectl default grace period.",
              "default": -1
            },
            "deleteLocalData": {
              "type": "boolean",
              "description": "Delete local data even if emptyDir volumes are used (for drain operation)",
              "default": false
            },
            "ignoreDaemonsets": {
              "type": "boolean",
              "description": "Ignore DaemonSet-managed pods (for drain operation)",
              "default": true
            },
            "timeout": {
              "type": "string",
              "description": "The length of time to wait before giving up (for drain operation, e.g., '5m', '1h')",
              "default": "0"
            },
            "dryRun": {
              "type": "boolean",
              "description": "Show what would be done without actually doing it (for drain operation)",
              "default": false
            },
            "confirmDrain": {
              "type": "boolean",
              "description": "Explicit confirmation to drain the node (required for drain operation)",
              "default": false
            }
          },
          "required": [
            "operation"
          ]
        }
      },
      {
        "name": "port_forward",
        "description": "Forward a local port to a port on a Kubernetes resource",
        "inputSchema": {
          "type": "object",
          "properties": {
            "resourceType": {
              "type": "string"
            },
            "resourceName": {
              "type": "string"
            },
            "localPort": {
              "type": "number"
            },
            "targetPort": {
              "type": "number"
            },
            "namespace": {
              "type": "string"
            }
          },
          "required": [
            "resourceType",
            "resourceName",
            "localPort",
            "targetPort"
          ]
        }
      },
      {
        "name": "stop_port_forward",
        "description": "Stop a port-forward process",
        "inputSchema": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            }
          },
          "required": [
            "id"
          ]
        }
      },
      {
        "name": "exec_in_pod",
        "description": "Execute a command in a Kubernetes pod or container and return the output",
        "inputSchema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the pod to execute the command in"
            },
            "namespace": {
              "type": "string",
              "description": "Kubernetes namespace",
              "default": "default"
            },
            "command": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ],
              "description": "Command to execute in the pod (string or array of args)"
            },
            "container": {
              "type": "string",
              "description": "Container name (required when pod has multiple containers)"
            },
            "shell": {
              "type": "string",
              "description": "Shell to use for command execution (e.g. '/bin/sh', '/bin/bash'). If not provided, will use command as-is."
            },
            "timeout": {
              "type": "number",
              "description": "Timeout for command - 60000 milliseconds if not specified"
            },
            "context": {
              "type": "string",
              "description": "Kubeconfig Context to use for the command (optional - defaults to null)",
              "default": ""
            }
          },
          "required": [
            "name",
            "command"
          ]
        }
      },
      {
        "name": "list_api_resources",
        "description": "List the API resources available in the cluster",
        "inputSchema": {
          "type": "object",
          "properties": {
            "apiGroup": {
              "type": "string",
              "description": "API group to filter by"
            },
            "namespaced": {
              "type": "boolean",
              "description": "If true, only show namespaced resources"
            },
            "context": {
              "type": "string",
              "description": "Kubeconfig Context to use for the command (optional - defaults to null)",
              "default": ""
            },
            "verbs": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of verbs to filter by"
            },
            "output": {
              "type": "string",
              "description": "Output format (wide, name, or no-headers)",
              "enum": [
                "wide",
                "name",
                "no-headers"
              ],
              "default": "wide"
            }
          }
        }
      },
      {
        "name": "kubectl_generic",
        "description": "Execute any kubectl command with the provided arguments and flags",
        "inputSchema": {
          "type": "object",
          "properties": {
            "command": {
              "type": "string",
              "description": "The kubectl command to execute (e.g. patch, rollout, top)"
            },
            "subCommand": {
              "type": "string",
              "description": "Subcommand if applicable (e.g. 'history' for rollout)"
            },
            "resourceType": {
              "type": "string",
              "description": "Resource type (e.g. pod, deployment)"
            },
            "name": {
              "type": "string",
              "description": "Resource name"
            },
            "namespace": {
              "type": "string",
              "description": "Kubernetes namespace",
              "default": "default"
            },
            "outputFormat": {
              "type": "string",
              "description": "Output format (e.g. json, yaml, wide)",
              "enum": [
                "json",
                "yaml",
                "wide",
                "name",
                "custom"
              ]
            },
            "flags": {
              "type": "object",
              "description": "Command flags as key-value pairs",
              "additionalProperties": true
            },
            "args": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Additional command arguments"
            },
            "context": {
              "type": "string",
              "description": "Kubeconfig Context to use for the command (optional - defaults to null)",
              "default": ""
            }
          },
          "required": [
            "command"
          ]
        }
      },
      {
        "name": "ping",
        "description": "Verify that the counterpart is still responsive and the connection is alive.",
        "inputSchema": {
          "type": "object",
          "properties": {},
          "required": []
        }
      }
    ],
    "discovered_via": "mcp_python_sdk",
    "server_name": "kubernetes"
  },
  "gcp-observability": {
    "tools": [
      {
        "name": "correlate-telemetry",
        "description": "Correlate logs and traces for comprehensive analysis",
        "inputSchema": {
          "type": "object",
          "properties": {
            "trace_id": {
              "type": "string",
              "description": "Trace ID for correlation"
            },
            "time_window": {
              "type": "integer",
              "description": "Time window in seconds (default: 300)",
              "default": 300
            }
          },
          "required": [
            "trace_id"
          ]
        }
      },
      {
        "name": "build-failure-timeline",
        "description": "Build chronological timeline of events for failure analysis",
        "inputSchema": {
          "type": "object",
          "properties": {
            "trace_id": {
              "type": "string",
              "description": "Trace ID for timeline analysis"
            },
            "time_window": {
              "type": "integer",
              "description": "Time window in seconds (default: 600)",
              "default": 600
            },
            "include_related_traces": {
              "type": "boolean",
              "description": "Include related traces in timeline",
              "default": true
            }
          },
          "required": [
            "trace_id"
          ]
        }
      },
      {
        "name": "analyze-microservice-patterns",
        "description": "Analyze microservice failure patterns specific to Online Boutique",
        "inputSchema": {
          "type": "object",
          "properties": {
            "trace_ids": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of trace IDs to analyze for patterns"
            },
            "time_range": {
              "type": "object",
              "properties": {
                "start_time": {
                  "type": "string"
                },
                "end_time": {
                  "type": "string"
                }
              },
              "description": "Time range for pattern analysis"
            },
            "focus_services": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Online Boutique services to focus on",
              "default": [
                "frontend",
                "cartservice",
                "productcatalogservice",
                "checkoutservice"
              ]
            }
          },
          "required": [
            "trace_ids"
          ]
        }
      },
      {
        "name": "detect-cascade-failures",
        "description": "Detect cascade failure patterns across Online Boutique microservices",
        "inputSchema": {
          "type": "object",
          "properties": {
            "initial_trace_id": {
              "type": "string",
              "description": "Initial trace ID where failure started"
            },
            "cascade_window": {
              "type": "integer",
              "description": "Time window in seconds to look for cascade effects",
              "default": 300
            },
            "severity_threshold": {
              "type": "string",
              "description": "Minimum severity to consider",
              "default": "WARNING"
            }
          },
          "required": [
            "initial_trace_id"
          ]
        }
      }
    ],
    "discovered_via": "mcp_python_sdk",
    "server_name": "gcp-observability"
  }
}
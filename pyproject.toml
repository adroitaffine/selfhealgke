[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "gke-auto-heal-agent"
version = "0.1.0"
description = "Intelligent AIOps solution for GKE with AI-powered root cause analysis"
authors = [
    {name = "GKE Auto-Heal Team", email = "team@example.com"}
]
readme = "README.md"
license = {text = "Apache-2.0"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # ADK and A2A Communication
    "google-cloud-adk>=0.1.0",
    "a2a-sdk>=0.1.0",
    
    # MCP Integration
    "mcp-sdk>=0.1.0",
    
    # Google Cloud Services
    "google-cloud-logging>=3.8.0",
    "google-cloud-trace>=1.13.0",
    "google-cloud-aiplatform>=1.38.0",
    "google-cloud-container>=2.32.0",
    "google-auth>=2.23.0",
    
    # Kubernetes Integration
    "kubernetes>=28.1.0",
    "kubectl-ai>=0.1.0",
    
    # Vertex AI Gemini
    "google-generativeai>=0.3.0",
    "vertexai>=1.38.0",
    
    # Web Framework and HTTP
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "httpx>=0.25.0",
    "websockets>=12.0",
    
    # Data Processing and Validation
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "structlog>=23.2.0",
    
    # Async and Concurrency
    "asyncio-mqtt>=0.16.0",
    "aiofiles>=23.2.1",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "click>=8.1.0",
    "rich>=13.7.0",
    "tenacity>=8.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
    "respx>=0.20.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.scripts]
auto-heal-agent = "agents.orchestrator_agent:main"
rca-agent = "agents.rca_agent:main"
remediation-agent = "agents.remediation_agent:main"
chatbot-agent = "agents.chatbot_agent:main"
audit-agent = "agents.audit_agent:main"

[project.urls]
Homepage = "https://github.com/example/gke-auto-heal-agent"
Documentation = "https://gke-auto-heal-agent.readthedocs.io/"
Repository = "https://github.com/example/gke-auto-heal-agent.git"
Issues = "https://github.com/example/gke-auto-heal-agent/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["agents*", "mcp_servers*"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["agents", "mcp_servers"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "google.cloud.adk.*",
    "a2a_sdk.*",
    "mcp_sdk.*",
    "kubectl_ai.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
    "agents/tests",
    "mcp_servers/tests",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as asyncio tests",
]

[tool.coverage.run]
source = ["agents", "mcp_servers"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]